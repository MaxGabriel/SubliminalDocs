<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Categories/UIView+SLAccessibility_Internal.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cat/UIView(SLAccessibility_Internal)</TokenIdentifier>
			<Abstract type="html">The methods in the UIView (SLAccessibility_Internal) category describe
criteria that determine whether mock views will appear in the accessibility
hierarchy.</Abstract>
			<DeclaredIn>NSObject+SLAccessibilityHierarchy.h</DeclaredIn>
            
			
			<NodeRef refid="29"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UIView/elementObject:isMockingViewObject:</TokenIdentifier>
			<Abstract type="html">Returns a Boolean value that indicates whether an object is a mock view.</Abstract>
			<DeclaredIn>NSObject+SLAccessibilityHierarchy.h</DeclaredIn>
			
			<Declaration>+ (BOOL)elementObject:(id)elementObject isMockingViewObject:(id)viewObject</Declaration>
			<Parameters>
				<Parameter>
					<Name>elementObject</Name>
					<Abstract type="html">An object which may or may not be a mock view.</Abstract>
				</Parameter><Parameter>
					<Name>viewObject</Name>
					<Abstract type="html">An object which may or may not be a view.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if viewObject is a UIView and elementObject is mocking that view, otherwise NO.</Abstract></ReturnValue>
			<Anchor>//api/name/elementObject:isMockingViewObject:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UIView/elementMockingSelfWillAppearInAccessibilityHierarchy</TokenIdentifier>
			<Abstract type="html">Returns a Boolean value that indicates whether an object mocking the receiver
will appear in an accessibility hierarchy.</Abstract>
			<DeclaredIn>NSObject+SLAccessibilityHierarchy.h</DeclaredIn>
			
			<Declaration>- (BOOL)elementMockingSelfWillAppearInAccessibilityHierarchy</Declaration>
			
			<ReturnValue><Abstract type="html">YES if an object mocking the receiver will appear in an accessibility
hierarchy, otherwise NO.</Abstract></ReturnValue>
			<Anchor>//api/name/elementMockingSelfWillAppearInAccessibilityHierarchy</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UIView/classForcesPresenceOfMockingViewsInAccessibilityHierarchy</TokenIdentifier>
			<Abstract type="html">Returns a Boolean value that indicates whether the receiver&apos;s class
forces the presence of mock views in the accessibility hierarchy.</Abstract>
			<DeclaredIn>NSObject+SLAccessibilityHierarchy.h</DeclaredIn>
			
			<Declaration>- (BOOL)classForcesPresenceOfMockingViewsInAccessibilityHierarchy</Declaration>
			
			<ReturnValue><Abstract type="html">YES if the receiver&apos;s class forces the presence of objects mocking
instances of the class in an accessibility hierarchy, otherwise NO.</Abstract></ReturnValue>
			<Anchor>//api/name/classForcesPresenceOfMockingViewsInAccessibilityHierarchy</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
        
	</File>
</Tokens>